{"name":"Eventcallback","tagline":"Retrofit callbacks on steroids","body":"EventCallback\r\n=============\r\nEventCallback allows creating instances of [Retrofit](http://square.github.io/retrofit/) [callbacks](http://square.github.io/retrofit/javadoc/retrofit/Callback.html) using short readable syntax.\r\n\r\nInstead of creating anonymous classes manually (where you have to take care of not using parent class fields that can change by the time server response arrives)\r\n```java\r\nnew Callback<SuccessDTO>() {\r\n\r\n    @Override\r\n    public void success(SuccessDTO s, Response response) {\r\n        boolean stillSameSession = myCodeCheckingIfItIsStillSameSession();\r\n        if(stillSameSession) {\r\n            bus.post(new MyEvent());\r\n            bus.post(new SuccessEvent());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void failure(RetrofitError error) {\r\n        RestErrorWithMsg restErrorWithMsg = myCodeThatTriesToConvertRetrofitErrorToReasonCallFailed(error);\r\n        bus.post(new LoginValidationFailedEvent(restErrorWithMsg));\r\n    }\r\n};\r\n```\r\nyou can use EventCallback like this:\r\n```java\r\nEventCallback.<SuccessDTO>builder(config, new TypeToken<RestErrorWithMsg>(){})\r\n    .onSuccess().postEvents(new MyEvent(), new SuccessEvent()).validThisSessionOnly()\r\n    .onError().postResponseEvents(new LoginValidationFailedEvent()).validBetweenSessions()\r\n    .build();\r\n``` \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}